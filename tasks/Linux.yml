---

- name: Linux | Create Terraform directory
  file:
    path: "{{ terraform_path }}"
    state: directory

- name: Linux | Check if terraform binary exists
  stat:
    path: "{{ terraform_path }}/terraform"
  register: terraform_st

- name: Linux | Check terraform binary version
  shell: "{{ terraform_path }}/terraform --version | grep '^Terraform v' | sed 's/Terraform v//'"
  register: terraform_installed
  changed_when: False
  when: terraform_st.stat.exists

- name: Linux | Download Terraform release
  get_url:
    url: "{{ terraform_url }}"
    dest: "{{ terraform_path }}/{{ terraform_file }}"
    checksum: "{{ terraform_checksum }}"
  when: "(not terraform_st.stat.exists) or (terraform_installed.stdout != terraform_version)"

- name: Linux | Extract Terraform binary
  unarchive:
    src: "{{ terraform_path }}/{{ terraform_file }}"
    dest: "{{ terraform_path }}"
  when: "(not terraform_st.stat.exists) or (terraform_installed.stdout != terraform_version)"

- name: Linux | Cleanup
  file:
    path: "{{ terraform_path }}/{{ terraform_file }}"
    state: absent

- name: Linux | Symlink terraform to /usr/local/bin
  file:
    src: "{{ terraform_path }}/terraform"
    dest: "{{ terraform_bin_dir }}/terraform"
    state: link

- name: Linux | Get Terraform version
  command: terraform --version
  register: terraform_status
  changed_when: False

- name: Linux | Check that Terraform is not out of date
  assert:
    that: "'Terraform is out of date' not in terraform_status.stdout"
  when: terraform_latest
